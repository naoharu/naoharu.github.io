<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on 順道制勝</title>
    <link>https://naoharu.github.io/tags/programming/index.xml</link>
    <description>Recent content in Programming on 順道制勝</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; &lt;a href=&#34;https://twitter.com/naoharu&#34;&gt;Naoharu SASAKI&lt;/a&gt; 2017</copyright>
    <atom:link href="https://naoharu.github.io/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>checkboxにチェックしていないことを送信</title>
      <link>https://naoharu.github.io/archives/12144</link>
      <pubDate>Thu, 17 Dec 2015 09:51:30 +0000</pubDate>
      
      <guid>https://naoharu.github.io/archives/12144</guid>
      <description>&lt;p&gt;久しぶりにクライミング以外の話題。&lt;/p&gt;

&lt;p&gt;まぁ当たり前なのだけど、HTMLのcheckboxでformを送信するとき、checkが入っていないとサーバーに値自体送信されない。&lt;/p&gt;

&lt;p&gt;このため、例えばサーバー側で情報をセッション領域などに入れて持ちまわす場合、&lt;/p&gt;

&lt;p&gt;一旦チェックを入れた状態を保持してしまうと、それを外すことが画面からの操作ではできなくなってしまう。&lt;/p&gt;

&lt;p&gt;その問題の解決には、Springではcheckboxと一緒にhidden項目を作って、それを一緒に送信するのがセオリーみたい。&lt;/p&gt;

&lt;pre class=&#34;lang:xhtml decode:true&#34;&gt;&amp;lt;input type=&#34;checkbox&#34; value=&#34;true&#34; name=&#34;springCheckboxTest&#34; id=&#34;springCheckboxTest&#34;&amp;gt;
&amp;lt;input type=&#34;hidden&#34; value=&#34;on&#34; name=&#34;_springCheckboxTest&#34;&amp;gt;
&lt;/pre&gt;

&lt;p&gt;こんな感じでcheckboxのnameの先頭にアンスコつけたnameのhidden項目を送信すると、&lt;/p&gt;

&lt;p&gt;勝手にspring側でバインドしてくれるみたい。&lt;/p&gt;

&lt;p&gt;そして、上記のようなhtmlはspringのformタグを使えば出力可能とのこと。&lt;/p&gt;

&lt;pre class=&#34;lang:xhtml decode:true &#34; &gt;&amp;lt;form:checkbox path=&#34;springCheckboxTest&#34; /&amp;gt;
&lt;/pre&gt;

&lt;p&gt;参考：&lt;a href=&#34;http://docs.spring.io/spring/docs/2.0.x/reference/mvc.html#mvc-formtaglib-checkboxtag&#34;&gt;13.9.4. The checkbox tag&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;なるほどね！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MacOS X lionでrvmでrubyをインストールしようとしてハマった日</title>
      <link>https://naoharu.github.io/archives/10002</link>
      <pubDate>Thu, 03 May 2012 16:53:12 +0000</pubDate>
      
      <guid>https://naoharu.github.io/archives/10002</guid>
      <description>&lt;p&gt;ちょっとした野暮用で、Mac OS X(Lion)にRuby on Rails 3.2の開発環境を構築することになったのだけど結構ハマった。のでメモ。&lt;/p&gt;

&lt;p&gt;ひとまず、&lt;/p&gt;

&lt;p&gt;[c]&lt;/p&gt;

&lt;p&gt;sasaki% rvm install 1.9.2-p320&lt;/p&gt;

&lt;p&gt;The provided CC(/usr/bin/gcc) is LLVM based, it is not yet fully supported by ruby and gems, please read `rvm requirements`.&lt;/p&gt;

&lt;p&gt;[/c]&lt;/p&gt;

&lt;p&gt;と怒られる。調べてみると、どうやらlionからデフォのCCが本家GCCではなくLLVM basedなものになっているらしい。&lt;a href=&#34;https://github.com/kennethreitz/osx-gcc-installer&#34;&gt;本家GCCをダウンロード&lt;/a&gt;＆インストールして、CCを書き換え。&lt;/p&gt;

&lt;p&gt;[c]&lt;/p&gt;

&lt;p&gt;sasaki$ echo &amp;ldquo;export CC=/usr/bin/gcc-4.2&amp;rdquo; &amp;gt;&amp;gt; ~/.bash_profile&lt;/p&gt;

&lt;p&gt;[/c]&lt;/p&gt;

&lt;p&gt;いったんゴミを消して、改めてrvm install 1.9.2してみる。&lt;/p&gt;

&lt;p&gt;[c]&lt;/p&gt;

&lt;p&gt;sasaki$ rvm remove 1.9.2-p320&lt;/p&gt;

&lt;p&gt;sasaki% rvm install 1.9.2-p320&lt;/p&gt;

&lt;p&gt;[/c]&lt;/p&gt;

&lt;p&gt;そしたら、readlineのbuildでコケるので、logを見る。&lt;/p&gt;

&lt;p&gt;[c]&lt;/p&gt;

&lt;p&gt;sasaki$ vi /Users/sasaki/.rvm/log/ruby-1.9.3-p0/make.log&lt;/p&gt;

&lt;p&gt;[/c]&lt;/p&gt;

&lt;p&gt;該当部分は下記の通り。&lt;/p&gt;

&lt;p&gt;[c]&lt;/p&gt;

&lt;p&gt;compiling readline.c&lt;/p&gt;

&lt;p&gt;readline.c: In function ‘username_completion_proc_call’:&lt;/p&gt;

&lt;p&gt;readline.c:1472: error: ‘username_completion_function’ undeclared (first use in this function)&lt;/p&gt;

&lt;p&gt;readline.c:1472: error: (Each undeclared identifier is reported only once&lt;/p&gt;

&lt;p&gt;readline.c:1472: error: for each function it appears in.)&lt;/p&gt;

&lt;p&gt;make[2]: *** [readline.o] Error 1&lt;/p&gt;

&lt;p&gt;make&lt;a href=&#34;https://github.com/kennethreitz/osx-gcc-installer&#34;&gt;1&lt;/a&gt;: *** [ext/readline/all] Error 2&lt;/p&gt;

&lt;p&gt;make: *** [build-ext] Error 2&lt;/p&gt;

&lt;p&gt;[/c]&lt;/p&gt;

&lt;p&gt;これも世界に聞いてみると、readlineだけ別buildすれば良いとのことなので、&lt;/p&gt;

&lt;p&gt;[c]&lt;/p&gt;

&lt;p&gt;sasaki$ rvm pkg install readline&lt;/p&gt;

&lt;p&gt;[/c]&lt;/p&gt;

&lt;p&gt;で、ビタmakeできた。その後、ようやく&lt;/p&gt;

&lt;p&gt;[c]&lt;/p&gt;

&lt;p&gt;sasaki$ rvm remove 1.9.2-p320&lt;/p&gt;

&lt;p&gt;sasaki% rvm install 1.9.2-p320&lt;/p&gt;

&lt;p&gt;（略）&lt;/p&gt;

&lt;p&gt;Install of ruby-1.9.2-p320 &amp;#8211; #complete&lt;/p&gt;

&lt;p&gt;[/c]&lt;/p&gt;

&lt;p&gt;で、完了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2chのスレで育ってるNTEmacsが良い感じ</title>
      <link>https://naoharu.github.io/archives/9838</link>
      <pubDate>Wed, 16 Nov 2011 15:23:20 +0000</pubDate>
      
      <guid>https://naoharu.github.io/archives/9838</guid>
      <description>&lt;p&gt;これ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ai11.net/2009/misc/&#34;&gt;http://ai11.net/2009/misc/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;自分用メモ。何かわかる人は使えば良いと思う。&lt;/p&gt;

&lt;p&gt;[shell]&lt;/p&gt;

&lt;p&gt;;; -*- mode: emacs-lisp -*-&lt;/p&gt;

&lt;p&gt;(custom-set-variables&lt;/p&gt;

&lt;p&gt;;; custom-set-variables was added by Custom.&lt;/p&gt;

&lt;p&gt;;; If you edit it by hand, you could mess it up, so be careful.&lt;/p&gt;

&lt;p&gt;;; Your init file should contain only one such instance.&lt;/p&gt;

&lt;p&gt;;; If there is more than one, they won&amp;#8217;t work right.&lt;/p&gt;

&lt;p&gt;&amp;#8216;(column-number-mode t)&lt;/p&gt;

&lt;p&gt;&amp;#8216;(show-paren-mode t))&lt;/p&gt;

&lt;p&gt;(custom-set-faces&lt;/p&gt;

&lt;p&gt;;; custom-set-faces was added by Custom.&lt;/p&gt;

&lt;p&gt;;; If you edit it by hand, you could mess it up, so be careful.&lt;/p&gt;

&lt;p&gt;;; Your init file should contain only one such instance.&lt;/p&gt;

&lt;p&gt;;; If there is more than one, they won&amp;#8217;t work right.&lt;/p&gt;

&lt;p&gt;&amp;#8216;(default ((t (:background &amp;ldquo;gray93&amp;rdquo; :foreground &amp;ldquo;navy&amp;rdquo;))))&lt;/p&gt;

&lt;p&gt;&amp;#8216;(cperl-array-face ((t (:foreground &amp;ldquo;darkslateblue&amp;rdquo;))))&lt;/p&gt;

&lt;p&gt;&amp;#8216;(cperl-hash-face ((t (:background &amp;ldquo;lightyellow2&amp;rdquo; :foreground &amp;ldquo;firebrick&amp;rdquo; :slant normal :weight bold))))&lt;/p&gt;

&lt;p&gt;&amp;#8216;(cperl-nonoverridable-face ((t (:foreground &amp;ldquo;royalblue&amp;rdquo;))))&lt;/p&gt;

&lt;p&gt;&amp;#8216;(cursor ((t (:background &amp;ldquo;navy&amp;rdquo;))))&lt;/p&gt;

&lt;p&gt;&amp;#8216;(font-lock-builtin-face ((t (:foreground &amp;ldquo;palevioletred&amp;rdquo;))))&lt;/p&gt;

&lt;p&gt;&amp;#8216;(font-lock-comment-face ((t (:foreground &amp;ldquo;dimgray&amp;rdquo;))))&lt;/p&gt;

&lt;p&gt;&amp;#8216;(font-lock-constant-face ((t (:foreground &amp;ldquo;seagreen&amp;rdquo;))))&lt;/p&gt;

&lt;p&gt;&amp;#8216;(font-lock-function-name-face ((t (:foreground &amp;ldquo;mediumblue&amp;rdquo; :weight bold))))&lt;/p&gt;

&lt;p&gt;&amp;#8216;(font-lock-keyword-face ((t (:foreground &amp;ldquo;slateblue&amp;rdquo;))))&lt;/p&gt;

&lt;p&gt;&amp;#8216;(font-lock-string-face ((t (:foreground &amp;ldquo;mediumvioletred&amp;rdquo;))))&lt;/p&gt;

&lt;p&gt;&amp;#8216;(font-lock-type-face ((t (:foreground &amp;ldquo;royalblue&amp;rdquo;))))&lt;/p&gt;

&lt;p&gt;&amp;#8216;(font-lock-variable-name-face ((t (:foreground &amp;ldquo;chocolate&amp;rdquo;))))&lt;/p&gt;

&lt;p&gt;&amp;#8216;(font-lock-warning-face ((t (:foreground &amp;ldquo;firebrick&amp;rdquo;))))&lt;/p&gt;

&lt;p&gt;&amp;#8216;(region ((((class color) (min-colors 88) (background light)) (:background &amp;ldquo;LightSteelBlue1&amp;rdquo;)))))&lt;/p&gt;

&lt;p&gt;(set-language-environment &amp;ldquo;Japanese&amp;rdquo;)&lt;/p&gt;

&lt;p&gt;(setq make-backup-files nil)&lt;/p&gt;

&lt;p&gt;(setq completion-ignore-case t)&lt;/p&gt;

&lt;p&gt;(setq default-indicate-empty-lines t)&lt;/p&gt;

&lt;p&gt;(setq mode-require-final-newline nil)&lt;/p&gt;

&lt;p&gt;(setq sentence-end-double-space nil)&lt;/p&gt;

&lt;p&gt;(setq-default indent-tabs-mode nil)&lt;/p&gt;

&lt;p&gt;(setenv &amp;ldquo;TZ&amp;rdquo; &amp;ldquo;JST-9&amp;rdquo;)&lt;/p&gt;

&lt;p&gt;(global-auto-revert-mode t)&lt;/p&gt;

&lt;p&gt;(blink-cursor-mode nil)&lt;/p&gt;

&lt;p&gt;(show-paren-mode t)&lt;/p&gt;

&lt;p&gt;(tooltip-mode nil)&lt;/p&gt;

&lt;p&gt;(setq ring-bell-function &amp;#8216;ignore)&lt;/p&gt;

&lt;p&gt;(global-set-key [kanji] &amp;#8216;ignore)&lt;/p&gt;

&lt;p&gt;(prefer-coding-system &amp;#8216;utf-8-dos)&lt;/p&gt;

&lt;p&gt;(set-charset-priority &amp;#8216;ascii &amp;#8216;japanese-jisx0213.2004-1 &amp;#8216;japanese-jisx0213-2&lt;/p&gt;

&lt;p&gt;&amp;#8216;katakana-jisx0201 &amp;#8216;cp932)&lt;/p&gt;

&lt;p&gt;(set-coding-system-priority &amp;#8216;utf-8 &amp;#8216;shift_jis-2004 &amp;#8216;iso-2022-jp-2004&lt;/p&gt;

&lt;p&gt;&amp;#8216;euc-jis-2004)&lt;/p&gt;

&lt;p&gt;(set-file-name-coding-system &amp;#8216;cp932)&lt;/p&gt;

&lt;p&gt;(setq quail-keyboard-layout-type &amp;ldquo;jp106&amp;rdquo;)&lt;/p&gt;

&lt;p&gt;(dolist (coding-system &amp;#8216;(sjis euc-jp iso-2022-jp iso-2022-7bit shift_jis-2004&lt;/p&gt;

&lt;p&gt;euc-jis-2004 iso-2022-jp-2004))&lt;/p&gt;

&lt;p&gt;(coding-system-put coding-system :decode-translation-table&lt;/p&gt;

&lt;p&gt;(get &amp;#8216;japanese-ucs-jis-to-cp932-map &amp;#8216;translation-table))&lt;/p&gt;

&lt;p&gt;(coding-system-put coding-system :encode-translation-table&lt;/p&gt;

&lt;p&gt;(get &amp;#8216;japanese-ucs-cp932-to-jis-map &amp;#8216;translation-table)))&lt;/p&gt;

&lt;p&gt;(defun jisx0213-post-read-conv (len)&lt;/p&gt;

&lt;p&gt;(translate-region (point-min) (point-max)&lt;/p&gt;

&lt;p&gt;(get &amp;#8216;jisx0213-to-unicode &amp;#8216;translation-table)))&lt;/p&gt;

&lt;p&gt;(defun jisx0213-pre-write-conv (from to)&lt;/p&gt;

&lt;p&gt;(translate-region (point-min) (point-max)&lt;/p&gt;

&lt;p&gt;(get &amp;#8216;unicode-to-jisx0213 &amp;#8216;translation-table)))&lt;/p&gt;

&lt;p&gt;(dolist (coding-system &amp;#8216;(shift_jis-2004 iso-2022-jp-2004 euc-jis-2004))&lt;/p&gt;

&lt;p&gt;(coding-system-put coding-system :post-read-conversion&lt;/p&gt;

&lt;p&gt;&amp;#8216;jisx0213-post-read-conv)&lt;/p&gt;

&lt;p&gt;(coding-system-put coding-system :pre-write-conversion&lt;/p&gt;

&lt;p&gt;&amp;#8216;jisx0213-pre-write-conv))&lt;/p&gt;

&lt;p&gt;(setq-default w32-ime-mode-line-state-indicator &amp;ldquo;-&amp;rdquo;)&lt;/p&gt;

&lt;p&gt;(setq w32-ime-show-mode-line nil)&lt;/p&gt;

&lt;p&gt;(w32-ime-initialize)&lt;/p&gt;

&lt;p&gt;(setq default-input-method &amp;ldquo;W32-IME&amp;rdquo;)&lt;/p&gt;

&lt;p&gt;(setq default-frame-alist&lt;/p&gt;

&lt;p&gt;(append &amp;#8216;((top . 20)&lt;/p&gt;

&lt;p&gt;(left . 20)&lt;/p&gt;

&lt;p&gt;(height . 47))&lt;/p&gt;

&lt;p&gt;default-frame-alist))&lt;/p&gt;

&lt;p&gt;(setq scalable-fonts-allowed t)&lt;/p&gt;

&lt;p&gt;(setq w32-enable-synthesized-fonts t)&lt;/p&gt;

&lt;p&gt;(set-face-attribute &amp;#8216;default nil&lt;/p&gt;

&lt;p&gt;:family &amp;ldquo;Consolas&amp;rdquo;&lt;/p&gt;

&lt;p&gt;:height 100)&lt;/p&gt;

&lt;p&gt;(setq ttf-japanese &amp;ldquo;メイリオ&amp;rdquo;)&lt;/p&gt;

&lt;p&gt;(set-fontset-font &amp;ldquo;fontset-default&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&amp;#8216;japanese-jisx0212&lt;/p&gt;

&lt;p&gt;&amp;#8216;(&amp;ldquo;ＭＳ ゴシック&amp;rdquo; . &amp;ldquo;iso10646-1&amp;rdquo;))&lt;/p&gt;

&lt;p&gt;(set-fontset-font &amp;ldquo;fontset-default&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&amp;#8216;japanese-jisx0213.2004-1&lt;/p&gt;

&lt;p&gt;`(,ttf-japanese . &amp;ldquo;iso10646-1&amp;rdquo;))&lt;/p&gt;

&lt;p&gt;(set-fontset-font &amp;ldquo;fontset-default&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&amp;#8216;japanese-jisx0213-2&lt;/p&gt;

&lt;p&gt;`(,ttf-japanese . &amp;ldquo;iso10646-1&amp;rdquo;))&lt;/p&gt;

&lt;p&gt;(set-fontset-font &amp;ldquo;fontset-default&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&amp;#8216;katakana-jisx0201&lt;/p&gt;

&lt;p&gt;`(,ttf-japanese . &amp;ldquo;iso10646-1&amp;rdquo;))&lt;/p&gt;

&lt;p&gt;(set-fontset-font &amp;ldquo;fontset-default&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&amp;#8216;cp932&lt;/p&gt;

&lt;p&gt;`(,ttf-japanese . &amp;ldquo;iso10646-1&amp;rdquo;))&lt;/p&gt;

&lt;p&gt;(set-fontset-font &amp;ldquo;fontset-default&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&amp;#8216;(#x3099 . #x309A)&lt;/p&gt;

&lt;p&gt;`(,ttf-japanese . &amp;ldquo;iso10646-1&amp;rdquo;))&lt;/p&gt;

&lt;p&gt;(add-to-list &amp;#8216;face-font-rescale-alist&lt;/p&gt;

&lt;p&gt;&amp;#8216;(&amp;ldquo;.*メイリオ.*&amp;rdquo; . 1.1))&lt;/p&gt;

&lt;p&gt;(defun char-after-nozero ()&lt;/p&gt;

&lt;p&gt;(let ((c (char-after)))&lt;/p&gt;

&lt;p&gt;(if (numberp c) c 0)))&lt;/p&gt;

&lt;p&gt;(defun ucs-after ()&lt;/p&gt;

&lt;p&gt;(let ((c (char-after-nozero)))&lt;/p&gt;

&lt;p&gt;(encode-char c &amp;#8216;ucs)))&lt;/p&gt;

&lt;p&gt;(defvar utf-sig-nosig-alist&lt;/p&gt;

&lt;p&gt;&amp;#8216;((utf-16le-with-signature . utf-16le)&lt;/p&gt;

&lt;p&gt;(utf-16be-with-signature . utf-16be)&lt;/p&gt;

&lt;p&gt;(utf-8-with-signature . utf-8)&lt;/p&gt;

&lt;p&gt;(utf-32-be-unix . utf-32be-unix)&lt;/p&gt;

&lt;p&gt;(utf-32-be-dos . utf-32be-dos)&lt;/p&gt;

&lt;p&gt;(utf-32-be-mac . utf-32be-mac)&lt;/p&gt;

&lt;p&gt;(utf-32-le-unix . utf-32le-unix)&lt;/p&gt;

&lt;p&gt;(utf-32-le-dos . utf-32le-dos)&lt;/p&gt;

&lt;p&gt;(utf-32-le-mac . utf-32le-mac)))&lt;/p&gt;

&lt;p&gt;(defun char-to-hex-coding-patch (coding)&lt;/p&gt;

&lt;p&gt;(if (assq (coding-system-base coding) utf-sig-nosig-alist)&lt;/p&gt;

&lt;p&gt;(coding-system-change-eol-conversion&lt;/p&gt;

&lt;p&gt;(cdr (assq (coding-system-base coding) utf-sig-nosig-alist))&lt;/p&gt;

&lt;p&gt;(coding-system-eol-type coding))&lt;/p&gt;

&lt;p&gt;coding))&lt;/p&gt;

&lt;p&gt;(defun char-to-hex-coding (c coding)&lt;/p&gt;

&lt;p&gt;(let ((i 0)&lt;/p&gt;

&lt;p&gt;(estr (encode-coding-string&lt;/p&gt;

&lt;p&gt;(string c)&lt;/p&gt;

&lt;p&gt;(char-to-hex-coding-patch coding)))&lt;/p&gt;

&lt;p&gt;(used-c (char-to-hex-coding-patch coding))&lt;/p&gt;

&lt;p&gt;(res &amp;ldquo;&amp;rdquo;))&lt;/p&gt;

&lt;p&gt;(if (string-match &amp;ldquo;iso-2022&amp;rdquo; (symbol-name coding))&lt;/p&gt;

&lt;p&gt;(setq estr (replace-regexp-in-string &amp;ldquo;\x1b\$?(?.&amp;rdquo; &amp;ldquo;&amp;rdquo; estr)))&lt;/p&gt;

&lt;p&gt;(while (&amp;lt; i (length estr))&lt;/p&gt;

&lt;p&gt;(setq res (concat res (format &amp;ldquo;%02X&amp;rdquo; (elt estr i))))&lt;/p&gt;

&lt;p&gt;(setq i (1+ i)))&lt;/p&gt;

&lt;p&gt;;; (setq res (concat res &amp;ldquo;-&amp;rdquo; (symbol-name used-c)))&lt;/p&gt;

&lt;p&gt;res))&lt;/p&gt;

&lt;p&gt;(defvar mode-line-show-buffer-code t&lt;/p&gt;

&lt;p&gt;&amp;ldquo;*非nilならUnicodeのほかにバッファコードをモード行に表示する。&amp;rdquo;)&lt;/p&gt;

&lt;p&gt;(defvar mode-line-char-code-added nil)&lt;/p&gt;

&lt;p&gt;(defun mode-line-show-char-code ()&lt;/p&gt;

&lt;p&gt;(let ((c (char-after-nozero)))&lt;/p&gt;

&lt;p&gt;(concat&lt;/p&gt;

&lt;p&gt;(format &amp;ldquo;&amp;#8211;%04X&amp;rdquo; (ucs-after))&lt;/p&gt;

&lt;p&gt;(if mode-line-show-buffer-code&lt;/p&gt;

&lt;p&gt;(format &amp;ldquo;&amp;#8211;%c:%s&amp;rdquo;&lt;/p&gt;

&lt;p&gt;(coding-system-mnemonic buffer-file-coding-system)&lt;/p&gt;

&lt;p&gt;(char-to-hex-coding (char-after-nozero)&lt;/p&gt;

&lt;p&gt;buffer-file-coding-system)))&lt;/p&gt;

&lt;p&gt;)))&lt;/p&gt;

&lt;p&gt;(defun mode-line-add-char-code ()&lt;/p&gt;

&lt;p&gt;(let ((len (length default-mode-line-format))&lt;/p&gt;

&lt;p&gt;(term (elt default-mode-line-format&lt;/p&gt;

&lt;p&gt;(1- (length default-mode-line-format)))))&lt;/p&gt;

&lt;p&gt;(delq term default-mode-line-format)&lt;/p&gt;

&lt;p&gt;(setq default-mode-line-format&lt;/p&gt;

&lt;p&gt;(append default-mode-line-format&lt;/p&gt;

&lt;p&gt;`((char-code-mode (:eval (mode-line-show-char-code)))&lt;/p&gt;

&lt;p&gt;,term)&lt;/p&gt;

&lt;p&gt;))&lt;/p&gt;

&lt;p&gt;(setq mode-line-char-code-added t)))&lt;/p&gt;

&lt;p&gt;(define-minor-mode char-code-mode&lt;/p&gt;

&lt;p&gt;nil&lt;/p&gt;

&lt;p&gt;nil nil nil&lt;/p&gt;

&lt;p&gt;:global t&lt;/p&gt;

&lt;p&gt;(if (and char-code-mode (not column-number-mode))&lt;/p&gt;

&lt;p&gt;(column-number-mode t))&lt;/p&gt;

&lt;p&gt;(unless mode-line-char-code-added&lt;/p&gt;

&lt;p&gt;(mode-line-add-char-code)))&lt;/p&gt;

&lt;p&gt;(char-code-mode t)&lt;/p&gt;

&lt;p&gt;(defun japan-composition-function (gstring)&lt;/p&gt;

&lt;p&gt;(if (= (lgstring-char-len gstring) 1)&lt;/p&gt;

&lt;p&gt;(compose-gstring-for-graphic gstring)&lt;/p&gt;

&lt;p&gt;(or (font-shape-gstring gstring)&lt;/p&gt;

&lt;p&gt;(let ((glyph-len (lgstring-glyph-len gstring))&lt;/p&gt;

&lt;p&gt;(last-char (lgstring-char gstring&lt;/p&gt;

&lt;p&gt;(1- (lgstring-char-len gstring))))&lt;/p&gt;

&lt;p&gt;(i 0)&lt;/p&gt;

&lt;p&gt;glyph)&lt;/p&gt;

&lt;p&gt;(while (and (&amp;lt; i glyph-len)&lt;/p&gt;

&lt;p&gt;(setq glyph (lgstring-glyph gstring i)))&lt;/p&gt;

&lt;p&gt;(setq i (1+ i)))&lt;/p&gt;

&lt;p&gt;(compose-glyph-string-relative gstring 0 i 0.1)))))&lt;/p&gt;

&lt;p&gt;(aset composition-function-table ?゙&lt;/p&gt;

&lt;p&gt;&amp;#8216;([&amp;rdquo;[うかきくけこさしすせそたちつてとはひふへほゝウカキクケコサシスセソタチツテトハヒフヘホワヰヱヲヽ].[゙]?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;1 japan-composition-function]&lt;/p&gt;

&lt;p&gt;[nil 0 japan-composition-function]))&lt;/p&gt;

&lt;p&gt;(aset composition-function-table ?゚&lt;/p&gt;

&lt;p&gt;&amp;#8216;([&amp;rdquo;[かきくけこはひふへほカキクケコセツトハヒフヘホㇷ].[゚]?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;1 japan-composition-function]&lt;/p&gt;

&lt;p&gt;[nil 0 japan-composition-function]))&lt;/p&gt;

&lt;p&gt;(aset composition-function-table ?˩&lt;/p&gt;

&lt;p&gt;&amp;#8216;([&amp;rdquo;[˥].[˩]?&amp;rdquo; 1 japan-composition-function]&lt;/p&gt;

&lt;p&gt;[nil 0 japan-composition-function]))&lt;/p&gt;

&lt;p&gt;(aset composition-function-table ?˥&lt;/p&gt;

&lt;p&gt;&amp;#8216;([&amp;rdquo;[˩].[˥]?&amp;rdquo; 1 japan-composition-function]&lt;/p&gt;

&lt;p&gt;[nil 0 japan-composition-function]))&lt;/p&gt;

&lt;p&gt;;; 透過&lt;/p&gt;

&lt;p&gt;(set-frame-parameter nil &amp;#8216;alpha 90)&lt;/p&gt;

&lt;p&gt;(add-to-list &amp;#8216;default-frame-alist &amp;#8216;(alpha . (0.85 0.75)))&lt;/p&gt;

&lt;p&gt;;; No toolbar&lt;/p&gt;

&lt;p&gt;(tool-bar-mode nil)&lt;/p&gt;

&lt;p&gt;;; No splash&lt;/p&gt;

&lt;p&gt;(setq inhibit-startup-message t)&lt;/p&gt;

&lt;p&gt;[/shell]&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>無類のモンタージュ好き。（またDIY系）</title>
      <link>https://naoharu.github.io/archives/9346</link>
      <pubDate>Mon, 13 Dec 2010 17:27:44 +0000</pubDate>
      
      <guid>https://naoharu.github.io/archives/9346</guid>
      <description>&lt;p&gt;モンタージュっていうのが正しいのか未だに疑問ですが、よく写真展とかでフィルムの人がやってる、こういうふうに写真を連結して見せる手法ってありますよね。最近、よく真似してやってます。なんか2枚の間に時間の広がりを感じで、グッとくるんですよねえ。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i1.wp.com/farm6.static.flickr.com/5130/5257695367_a408403193_z.jpg?w=700&#34; alt=&#34;&#34; data-recalc-dims=&#34;1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;あと白黒もmyブーム。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i0.wp.com/farm6.static.flickr.com/5164/5257602059_8236eb2ce5_z.jpg?w=700&#34; alt=&#34;&#34; data-recalc-dims=&#34;1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;このモンタージュ化を、毎回Photoshopとかでやるのはバカバカしいので、自作系。&lt;/p&gt;

&lt;p&gt;他にも、縦撮りで横2枚（まぁコレと同じか）とか、横撮りで2×2とか、まぁいろいろ作れますが、そこらへんは皆さんやってみてください！&lt;/p&gt;

&lt;p&gt;あ、ちなみに、これは2枚の画像のサイズが違うと失敗しちゃうので、そこだけご留意ください。&lt;/p&gt;

&lt;p&gt;（自分がいつもRaw現像でサイズ指定しててて問題無いので、このコード内でリサイズ処理はしてないです。。）&lt;/p&gt;

&lt;p&gt;まず、前に&lt;a href=&#34;http://defenceless.org/wordpress/?p=9196&#34;&gt;レターボックス化&lt;/a&gt;の時も紹介しましたが、ImageMagickをインストールします。Macの人は、portが利用可能です。&lt;/p&gt;

&lt;p&gt;[shell]&lt;/p&gt;

&lt;p&gt;$ sudo port install ImageMagick&lt;/p&gt;

&lt;p&gt;[/shell]&lt;/p&gt;

&lt;p&gt;その後、下記を実行します。&lt;/p&gt;

&lt;p&gt;[shell]&lt;/p&gt;

&lt;p&gt;#!/bin/bash&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;p&gt;# 2枚の画像を上下に並べて連結&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;p&gt;# ~$ ./1x2montage.sh 画像1 画像2&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;p&gt;# 出力ファイルの構成（ファイル名：out.jpg）&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;p&gt;# 画像1&lt;/p&gt;

&lt;p&gt;# 画像2&lt;/p&gt;

&lt;p&gt;# 画像1の下辺に白線を付ける&lt;/p&gt;

&lt;p&gt;tmp_height=`identify -format %h $1`&lt;/p&gt;

&lt;p&gt;width=`identify -format %w $1`&lt;/p&gt;

&lt;p&gt;height=`expr ${tmp_height} / 200`&lt;/p&gt;

&lt;p&gt;convert -quality 100 $1 -size ${width}x${height} xc:white -append temp1.jpg&lt;/p&gt;

&lt;p&gt;#画像1と画像2を縦に連結&lt;/p&gt;

&lt;p&gt;convert -append temp1.jpg $2 out.jpg&lt;/p&gt;

&lt;p&gt;[/shell]&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>無類のレターボックス好き（久しぶりにDIY系）</title>
      <link>https://naoharu.github.io/archives/9196</link>
      <pubDate>Tue, 14 Sep 2010 20:03:42 +0000</pubDate>
      
      <guid>https://naoharu.github.io/archives/9196</guid>
      <description>&lt;p&gt;写真や映画の映像とかで、上下に黒い帯がついているのって見た事ないですか？あれは本来、「レターボックス」っていう名前で、アスペクト比の異なる表示規格の間で互換性を得るためのものでした。なので、いわば「レターボックス」という手法は、一種の妥協案なんですが、あの黒い帯によって、ちょっと背景が明るくても色味が綺麗に見えたり、どことなくノスタルジックな雰囲気になったりして、個人的には好きだったりします。&lt;/p&gt;

&lt;p&gt;ちょっと例を挙げると、&lt;/p&gt;

&lt;p&gt;こちらが普通の縦横比の画像。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i1.wp.com/farm5.static.flickr.com/4106/4991232096_bfc8790ffe.jpg?w=700&#34; alt=&#34;&#34; data-recalc-dims=&#34;1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;そして、こちらがレターボックスによって1:1の縦横比にした画像。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i2.wp.com/farm5.static.flickr.com/4089/4990640515_01d764c7f5.jpg?w=700&#34; alt=&#34;&#34; data-recalc-dims=&#34;1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;こんな感じです。（モデル：アベ君）&lt;/p&gt;

&lt;p&gt;ただ、このようなレターボックスの画像を作る時、いちいちPhotoShopやGIMPなんて起動して手作業でやるのは面倒なので、自作スクリプトからImageMagickというツールを利用して、自動化してみました。&lt;/p&gt;

&lt;p&gt;ターミナルやシェルスクリプトをちょっと知っている、MacもしくはUnixユーザの人向きです。（Windowsでも同様なことは当然出来ると思いますが、やる気がおこらなかったので、誰かWindows向けにまとめてもらえると嬉しいです。）&lt;/p&gt;

&lt;p&gt;まず、画像の編集などが行えるImageMagickをインストールします。Mac を使っている人は portが利用出来ます。&lt;/p&gt;

&lt;p&gt;[shell]&lt;/p&gt;

&lt;p&gt;$ sudo port install ImageMagick&lt;/p&gt;

&lt;p&gt;[/shell]&lt;/p&gt;

&lt;p&gt;その後は、下記のシェルスクリプトを、レターボックス化したい画像ファイルを引数として実行します。しばらくすると、入力ファイル名の先頭に”LB_”が付加された名前で、レターボックス化された画像ファイルが出力されます。&lt;/p&gt;

&lt;p&gt;[shell]&lt;/p&gt;

&lt;p&gt;#!/bin/bash&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;p&gt;# letterbox.sh&lt;/p&gt;

&lt;p&gt;# 一般的なデジタルカメラのアスペクト比（3:2）の画像を、レターボックスで正方形にする。&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;p&gt;# 使い方&lt;/p&gt;

&lt;p&gt;# ~$ ./letterbox.sh 入力画像ファイル&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;p&gt;# 入力画像と同じ横幅、1/4の縦幅の、黒い帯画像の生成&lt;/p&gt;

&lt;p&gt;width=`identify -format %w $1`&lt;/p&gt;

&lt;p&gt;tmp_h=` identify -format %h $1`&lt;/p&gt;

&lt;p&gt;height=`expr ${tmp_h} / 4`&lt;/p&gt;

&lt;p&gt;convert -size ${width}x${height} xc:black black_line.jpg&lt;/p&gt;

&lt;p&gt;# 画像の下辺に黒い帯をつける&lt;/p&gt;

&lt;p&gt;convert -quality 100 $1 black_line.jpg -append temp.jpg&lt;/p&gt;

&lt;p&gt;# 画像の上辺に黒い帯をつけて、入力ファイル名の先頭に&amp;rdquo;LB_&amp;ldquo;をつけて出力する&lt;/p&gt;

&lt;p&gt;convert -quality 100 black_line.jpg temp.jpg -append &amp;ldquo;LB_${1}&amp;rdquo;&lt;/p&gt;

&lt;p&gt;# 一時ファイルを削除&lt;/p&gt;

&lt;p&gt;rm black_line.jpg&lt;/p&gt;

&lt;p&gt;rm temp.jpg&lt;/p&gt;

&lt;p&gt;[/shell]&lt;/p&gt;

&lt;p&gt;関係無いですが、こういうシェルがサクっと書ける・利用出来るってのも、Macの良いところかもしれないですね。Windowsだとなかなかやる気が、、、（結局やる気の問題）&lt;/p&gt;

&lt;p&gt;P.S.&lt;/p&gt;

&lt;p&gt;今回の作業中に、&lt;a href=&#34;http://www.imagemagick.org/&#34;&gt;ImageMagick&lt;/a&gt;について少し調べましたが、今流行の&lt;a href=&#34;http://www.imagemagick.org/script/high-dynamic-range.php&#34;&gt;ハイダイナミックレンジ&lt;/a&gt;周りもサポートしてるみたいですね！ほんと多機能なツールで、しかもコマンドラインから利用可能なので、ばしばしシェルを書いて効率よく使い倒したいところです。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>